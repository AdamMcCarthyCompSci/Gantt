[{"C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\index.js":"1","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\App.js":"2","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\reportWebVitals.js":"3","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\app\\store.js":"4","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\IncrementRows.js":"5","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\CreateTheme.js":"6","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\LeftTable.js":"7","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\IncrementMonths.js":"8","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\Table.js":"9","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\TaskInfo.js":"10","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\TableSlice.js":"11","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\Task.js":"12"},{"size":363,"mtime":1624319409467,"results":"13","hashOfConfig":"14"},{"size":1339,"mtime":1624319409459,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1624319409467,"results":"16","hashOfConfig":"14"},{"size":568,"mtime":1624319409460,"results":"17","hashOfConfig":"14"},{"size":1296,"mtime":1624319409464,"results":"18","hashOfConfig":"14"},{"size":5035,"mtime":1624319409463,"results":"19","hashOfConfig":"14"},{"size":1138,"mtime":1624319409464,"results":"20","hashOfConfig":"14"},{"size":1275,"mtime":1624319409464,"results":"21","hashOfConfig":"14"},{"size":3903,"mtime":1624319409465,"results":"22","hashOfConfig":"14"},{"size":4716,"mtime":1624319409466,"results":"23","hashOfConfig":"14"},{"size":8137,"mtime":1624319409465,"results":"24","hashOfConfig":"14"},{"size":3250,"mtime":1624319409466,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"158kus2",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},"C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\index.js",[],"C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\App.js",[],"C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\reportWebVitals.js",[],"C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\app\\store.js",[],"C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\IncrementRows.js",["58","59","60"],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n    rowCountTable,\r\n    decrement,\r\n    increment\r\n} from './TableSlice';\r\nimport styles from './Table.module.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n  }));\r\n\r\nexport function IncrementRows() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className={styles.row}>\r\n            <div className={classes.root}>\r\n                <ButtonGroup color=\"primary\" aria-label=\"Row Buttons\">\r\n                    <Button variant=\"contained\" color=\"primary\" startIcon={<RemoveIcon />} onClick={() => dispatch(decrement())}>Remove Row</Button>\r\n                    <Button variant=\"contained\" color=\"primary\" startIcon={<AddIcon />} onClick={() => dispatch(increment())}>Add Row</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\CreateTheme.js",["61","62"],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n    createTheme,\r\n    themesTable\r\n} from './TableSlice';\r\nimport styles from './Table.module.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));\r\n\r\nexport function CreateTheme() {\r\n    const dispatch = useDispatch();\r\n    const themes = useSelector(themesTable);\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [color, setColor] = React.useState('');\r\n    const [title, setTitle] = React.useState('');\r\n  \r\n    const handleTitleChange = (event) => {\r\n      setTitle(event.target.value || '');\r\n    };\r\n\r\n    const handleColorChange = (event) => {\r\n        setColor(event.target.value || '');\r\n      };\r\n  \r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleCancel = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        handleCancel();\r\n        for (let theme of themes) {\r\n            if (theme.title == title) {\r\n                console.log(\"Theme name taken!\")\r\n                return;\r\n            }\r\n        }\r\n        dispatch(createTheme({title: title, color: color}));\r\n      };\r\n\r\n    return (\r\n        <div className={styles.row}>\r\n      <Button variant=\"contained\" color=\"primary\" startIcon={<CreateIcon />} onClick={handleClickOpen}>New Theme</Button>\r\n      <Dialog disableBackdropClick disableEscapeKeyDown open={open} onClose={handleCancel}>\r\n        <DialogTitle>Fill the form</DialogTitle>\r\n        <DialogContent>\r\n          <form className={classes.container}>\r\n            <FormControl className={classes.formControl}>\r\n                <TextField id=\"theme-title\" label=\"Theme Title\" \r\n                value={title} \r\n                defaultValue={title} \r\n                onChange={handleTitleChange} \r\n                variant=\"outlined\"/>\r\n            </FormControl>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"demo-dialog-select-label\">Colour</InputLabel>\r\n              <Select\r\n                labelId=\"demo-dialog-select-label\"\r\n                id=\"demo-dialog-select\"\r\n                value={color}\r\n                onChange={handleColorChange}\r\n                input={<Input />}\r\n              >\r\n          <MenuItem value={\"#f44336\"}><FiberManualRecordIcon style={{fill: \"#f44336\"}}/></MenuItem>\r\n          <MenuItem value={\"#e91e63\"}><FiberManualRecordIcon style={{fill: \"#e91e63\"}}/></MenuItem>\r\n          <MenuItem value={\"#9c27b0\"}><FiberManualRecordIcon style={{fill: \"#9c27b0\"}}/></MenuItem>\r\n          <MenuItem value={\"#3f51b5\"}><FiberManualRecordIcon style={{fill: \"#3f51b5\"}}/></MenuItem>\r\n          <MenuItem value={\"#2196f3\"}><FiberManualRecordIcon style={{fill: \"#2196f3\"}}/></MenuItem>\r\n          <MenuItem value={\"#00bcd4\"}><FiberManualRecordIcon style={{fill: \"#00bcd4\"}}/></MenuItem>\r\n          <MenuItem value={\"#009688\"}><FiberManualRecordIcon style={{fill: \"#009688\"}}/></MenuItem>\r\n          <MenuItem value={\"#4caf50\"}><FiberManualRecordIcon style={{fill: \"#4caf50\"}}/></MenuItem>\r\n          <MenuItem value={\"#8bc34a\"}><FiberManualRecordIcon style={{fill: \"#8bc34a\"}}/></MenuItem>\r\n          <MenuItem value={\"#cddc39\"}><FiberManualRecordIcon style={{fill: \"#cddc39\"}}/></MenuItem>\r\n          <MenuItem value={\"#ffeb3b\"}><FiberManualRecordIcon style={{fill: \"#ffeb3b\"}}/></MenuItem>\r\n          <MenuItem value={\"#ff9800\"}><FiberManualRecordIcon style={{fill: \"#ff9800\"}}/></MenuItem>\r\n          <MenuItem value={\"#ff5722\"}><FiberManualRecordIcon style={{fill: \"#ff5722\"}}/></MenuItem>\r\n          <MenuItem value={\"#795548\"}><FiberManualRecordIcon style={{fill: \"#795548\"}}/></MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCancel} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleOk} color=\"primary\">\r\n            Ok\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n\r\n        </div>\r\n    )\r\n}","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\LeftTable.js",["63","64"],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  rowCountTable,\r\n} from './TableSlice';\r\nimport styles from './Table.module.css';\r\n\r\nexport function LeftTable() {\r\n\r\n    const dispatch = useDispatch();\r\n    const count = useSelector(rowCountTable);\r\n\r\n    return (\r\n        <div className={styles.leftTableContainer}>\r\n        <table className={styles.leftTable}>\r\n          <thead>\r\n            <tr>\r\n                <th className={styles.leftHeader}>\r\n                    test1\r\n                </th>\r\n            </tr>\r\n            <tr>\r\n                <th className={styles.leftHeader}>\r\n                    test1\r\n                </th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n              {[...Array(count)].map((index, row) => (\r\n                  <tr>\r\n                      <td\r\n                      //  key={row} \r\n                       className={styles.leftRow}>\r\n                        task\r\n                      </td>\r\n                  </tr>\r\n            ))}\r\n              </tbody>\r\n        </table>\r\n        </div>\r\n    );\r\n  }\r\n  ","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\IncrementMonths.js",["65","66"],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n    futureMonth,\r\n    pastMonth\r\n} from './TableSlice';\r\nimport styles from './Table.module.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n  }));\r\n\r\nexport function IncrementMonths() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className={styles.row}>\r\n            <div className={classes.root}>\r\n            <ButtonGroup color=\"primary\" aria-label=\"Month Buttons\">\r\n            <Button variant=\"contained\" color=\"primary\" startIcon={<RestoreIcon />} onClick={() => dispatch(pastMonth())}>Last Month</Button>\r\n              <Button variant=\"contained\" color=\"primary\" startIcon={<UpdateIcon />} onClick={() => dispatch(futureMonth())}>Next Month</Button>\r\n            </ButtonGroup>\r\n          </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\Table.js",["67","68","69","70","71","72","73","74","75","76","77"],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  rowCountTable,\r\n  currentDayTable,\r\n  daysTable,\r\n  tasksTable,\r\n  createTask\r\n\r\n} from './TableSlice';\r\nimport styles from './Table.module.css';\r\nimport dayjs from 'dayjs';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport { Task } from './Task';\r\n\r\nconst checkWeekend = (date, currentDay) => {\r\n  if (dayjs(date).isSame(currentDay)) {\r\n    return (\r\n      <th className={styles.today}\r\n      //  key={date}\r\n       >\r\n        {date.format(\"D\")}\r\n      </th>)\r\n  }\r\n  else if (date.format(\"d\") == 0 || date.format(\"d\") == 6) {\r\n    return (\r\n    <th className={styles.weekend}\r\n    //  key={date}\r\n     >\r\n      {date.format(\"D\")}\r\n    </th>)\r\n  }\r\n  else {\r\n    return (\r\n      <th className={styles.weekday} key={date}>\r\n        {date.format(\"D\")}\r\n      </th> )\r\n  }\r\n}\r\n\r\nconst checkMonth = (date) => {\r\n  if(dayjs(date).format(\"D\") == 1) {\r\n    return (\r\n      <th className={styles.month}\r\n      //  key={date} \r\n       colSpan={date.daysInMonth()}>\r\n        {date.format(\"MMMM YYYY\")}\r\n      </th>\r\n    );\r\n  }\r\n  else {\r\n    return;\r\n  }\r\n}\r\n\r\nexport function Table() {\r\n\r\n  const dispatch = useDispatch();\r\n  const count = useSelector(rowCountTable);\r\n  const currentDay = useSelector(currentDayTable);\r\n  const days = useSelector(daysTable);\r\n  const tasks = useSelector(tasksTable);\r\n  const [mouseOverCell, setMouseOverCell] = React.useState({date: null, rowNumber: null});\r\n\r\n  const handleMouseOver = (date, rowNumber) => {\r\n    setMouseOverCell({date, rowNumber});\r\n  };\r\n\r\n  const checkRow = (date, index, row) => {\r\n\r\n    if (row % 2 == 0) {\r\n      return (\r\n        <td className={styles.evenRow} \r\n        // key={date}\r\n        onMouseOver={() => handleMouseOver(date, row)}\r\n        onMouseLeave={() => handleMouseOver(null, null)}\r\n        onClick={() => dispatch(createTask({name: \"\", desc: \"\", index: index, row: row, theme: \"No Theme Selected\", width: 52}))}>\r\n            {tasks.map((task) => (\r\n            task.index.isSame(index, \"day\") && task.row == row && <Task index={index} row={row}/>\r\n              ))}\r\n          <Zoom in={date == mouseOverCell.date && row == mouseOverCell.rowNumber} {...(mouseOverCell ? { timeout: 800 } : {})} mountOnEnter unmountOnExit>\r\n            <AddIcon />\r\n          </Zoom>\r\n        </td>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <td className={styles.oddRow} \r\n        // key={date}\r\n        onMouseOver={() => handleMouseOver(date, row)}\r\n        onMouseLeave={() => handleMouseOver(null, null)}\r\n        onClick={() => dispatch(createTask({name: \"\", desc: \"\", index: index, row: row, theme: \"No Theme Selected\", width: 52}))}>\r\n            {tasks.map((task) => (\r\n            task.index.isSame(index, \"day\") && task.row == row && <Task index={index} row={row}/>\r\n              ))}\r\n          <Zoom in={date == mouseOverCell.date && row == mouseOverCell.rowNumber} {...(mouseOverCell ? { timeout: 800 } : {})} mountOnEnter unmountOnExit>\r\n            <AddIcon />\r\n          </Zoom>\r\n        </td>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n      <div className={styles.mainTableContainer}>\r\n      <table className={styles.mainTable}>\r\n        <thead style={{color: \"white\"}}>\r\n            <tr>\r\n          {days.map((date) => (\r\n            checkMonth(date)\r\n          ))}\r\n        </tr>\r\n            <tr>\r\n          {days.map((date) => (\r\n            checkWeekend(date, currentDay)\r\n          ))}\r\n          </tr>\r\n          </thead>\r\n          <tbody className=\"ganttBody\">\r\n            {[...Array(count)].map((index, row) => (\r\n                <tr>\r\n                  {days.map((index, date) => (\r\n                    checkRow(date, index, row)\r\n                  ))}\r\n                </tr>\r\n          ))}\r\n            </tbody>\r\n      </table>\r\n      </div>\r\n  );\r\n}\r\n","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\TaskInfo.js",["78","79"],"import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    selectedTaskTable,\r\n    renameTask,\r\n    descTask,\r\n    themesTable,\r\n    themeTask,\r\n    startDateTask,\r\n    endDateTask\r\n} from './TableSlice';\r\nimport styles from './Table.module.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DayJsUtils from '@date-io/dayjs';\r\nimport { DatePicker, KeyboardDatePicker } from \"@material-ui/pickers\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& .MuiTextField-root': {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n      },\r\n    },\r\n  }));\r\n\r\nexport function TaskInfo() {\r\n    const dispatch = useDispatch();\r\n    const selectedTask = useSelector(selectedTaskTable);\r\n    const themes = useSelector(themesTable);\r\n    const classes = useStyles();\r\n\r\n    const handleName = (event) => {\r\n        dispatch(renameTask({name: event.target.value}))\r\n    };\r\n    const handleDesc = (event) => {\r\n        dispatch(descTask({desc: event.target.value}))\r\n    };\r\n    const handleThemeChange = (event) => {\r\n        dispatch(themeTask({theme: event.target.value}))\r\n    };\r\n    const handleStartDate = (startDate) => {\r\n        dispatch(startDateTask({startDate: startDate}))\r\n    }\r\n    const handleEndDate = (endDate) => {\r\n        dispatch(endDateTask({endDate: endDate}))\r\n    }\r\n\r\n    return (\r\n        <div className={styles.taskInfoContainer}>\r\n        <Grid container spacing={0}>\r\n            <Grid item xs={3}>\r\n                {selectedTask.selected && <TextField id=\"TaskName\" label=\"Task Name\" value={selectedTask.name} defaultValue={selectedTask.name} onChange={handleName} variant=\"outlined\"/>}\r\n                {!selectedTask.selected && <TextField disabled id=\"TaskName\" label=\"No Task Selected\" value={selectedTask.name} defaultValue={selectedTask.name} onChange={handleName} variant=\"outlined\"/>}\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n                {selectedTask.selected && <TextField\r\n                id=\"TaskDesc\"\r\n                label=\"Task Description\"\r\n                multiline\r\n                rows={4}\r\n                rowsMax={4}\r\n                value={selectedTask.desc}\r\n                onChange={handleDesc}\r\n                variant=\"outlined\"\r\n                />}\r\n                {!selectedTask.selected && <TextField\r\n                    disabled\r\n                id=\"TaskDesc\"\r\n                label=\"No Task Selected\"\r\n                multiline\r\n                rows={4}\r\n                rowsMax={4}\r\n                value={selectedTask.desc}\r\n                onChange={handleDesc}\r\n                variant=\"outlined\"\r\n                />}\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n            {selectedTask.selected && <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"demo-dialog-select-label\">Theme</InputLabel>\r\n              <Select\r\n                labelId=\"demo-dialog-select-label\"\r\n                id=\"demo-dialog-select\"\r\n                value={selectedTask.theme}\r\n                onChange={handleThemeChange}\r\n                input={<Input />}\r\n              >\r\n                {themes.map((option) => (\r\n                    <MenuItem value={option.title}>{option.title}<FiberManualRecordIcon style={{fill: option.color}}/></MenuItem>\r\n                ))}\r\n              </Select>\r\n              </FormControl>}\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n            {selectedTask.selected && <MuiPickersUtilsProvider utils={DayJsUtils}>\r\n            <DatePicker\r\n                disableToolbar\r\n                variant=\"inline\"\r\n                label=\"Start Date\"\r\n                maxDate={selectedTask.endDate}\r\n                value={selectedTask.startDate}\r\n                onChange={handleStartDate}\r\n            />\r\n            <DatePicker\r\n                disableToolbar\r\n                variant=\"inline\"\r\n                label=\"End Date\"\r\n                minDate={selectedTask.startDate}\r\n                value={selectedTask.endDate}\r\n                onChange={handleEndDate}\r\n            />\r\n            </MuiPickersUtilsProvider>}\r\n            </Grid>\r\n        </Grid>\r\n      </div>\r\n    )\r\n}","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\TableSlice.js",["80","81","82","83","84","85","86","87","88","89","90","91"],"import { createSlice } from '@reduxjs/toolkit';\r\nimport dayjs from 'dayjs';\r\n\r\nconst current = dayjs();\r\nlet firstOfMonth = dayjs(current).subtract(dayjs().format(\"D\") - 1, \"day\");\r\nlet days = []\r\nlet currentMonth = dayjs(firstOfMonth);\r\nlet daysInCurrentMonth = dayjs(currentMonth).daysInMonth();\r\nfor (let i = 1; i <= daysInCurrentMonth; i++) {\r\n  days.push(currentMonth)\r\n  currentMonth = dayjs(currentMonth).add(1, \"day\");\r\n}\r\n\r\nexport const slice = createSlice({\r\n  name: 'table',\r\n  initialState: {\r\n    rowCount: 10,\r\n    currentDay: dayjs(current),\r\n    rightMonth: dayjs(firstOfMonth),\r\n    leftMonth: dayjs(firstOfMonth),\r\n    firstOfMonth: dayjs(firstOfMonth),\r\n    monthCount: 0,\r\n    days: days,\r\n    tasks: [],\r\n    selectedTask: {selected: false, name: \"\", desc: \"\", index: dayjs(), theme: \"No Theme Selected\", startDate: dayjs(), endDate: dayjs(), row: \"\"},\r\n    themes: [{title: \"No Theme Selected\", color: \"#0E5A8A\"}]\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      state.rowCount += 1;\r\n    },\r\n    decrement: state => {\r\n      if (state.rowCount > 0) {\r\n        state.rowCount -= 1;\r\n      }\r\n    },\r\n    futureMonth: state => {\r\n      state.monthCount += 1;\r\n      state.leftMonth = state.leftMonth.add(1, \"month\");\r\n      let futureMonth = state.leftMonth;\r\n      console.log(state.leftMonth);\r\n      let futureMonthDays = []\r\n      let daysInFutureMonth = futureMonth.daysInMonth();\r\n      for (let i = 1; i <= daysInFutureMonth; i++) {\r\n        futureMonthDays.push(futureMonth)\r\n        futureMonth = futureMonth.add(1, \"day\");\r\n      }\r\n      state.days = state.days.concat(futureMonthDays);\r\n    },\r\n    pastMonth: state => {\r\n      state.monthCount += 1\r\n      state.rightMonth = state.rightMonth.subtract(1, \"month\");\r\n      let pastMonth = state.rightMonth;\r\n      let pastMonthDays = []\r\n      let daysInPastMonth = pastMonth.daysInMonth();\r\n      for (let i = 1; i <= daysInPastMonth; i++) {\r\n        pastMonthDays.push(pastMonth)\r\n        pastMonth = pastMonth.add(1, \"day\");\r\n      }\r\n      state.days = pastMonthDays.concat(state.days);\r\n    },\r\n    createTask: (state, action) => {\r\n      if (state.tasks.find(task => (task.index).isSame(action.payload.index, \"day\") && task.row == action.payload.row)) {\r\n        console.log(\"Task already exists in this cell!\");\r\n      }\r\n      else {\r\n        console.log(action.payload);\r\n        state.tasks.push(action.payload);\r\n      }\r\n    },\r\n    dragTask: (state, action) => {\r\n      const isTask = (task) =>  ((task.index).isSame(action.payload.index, \"day\") && task.row == action.payload.row);\r\n      const taskIndex = state.tasks.findIndex(isTask);\r\n      let task = state.tasks[taskIndex];\r\n      if (task == undefined) {\r\n        console.log(\"Task not found!\", taskIndex);\r\n      }\r\n      if (action.payload.x > 0) {\r\n        state.tasks[taskIndex].index = dayjs(task.index).add(Math.abs(action.payload.x), \"day\");\r\n      }\r\n      else if (action.payload.x < 0) {\r\n        state.tasks[taskIndex].index = dayjs(task.index).subtract(Math.abs(action.payload.x), \"day\");\r\n      }\r\n      if (action.payload.y > 0) {\r\n        task.row += action.payload.y;\r\n      }\r\n      else if (action.payload.y < 0) {\r\n        task.row += action.payload.y;\r\n      }\r\n      state.tasks[taskIndex].index = task.index;\r\n      state.tasks[taskIndex].row = task.row;\r\n      state.selectedTask.index = state.tasks[taskIndex].index;\r\n      state.selectedTask.startDate = state.tasks[taskIndex].index;\r\n      state.selectedTask.endDate = state.tasks[taskIndex].index.add(state.tasks[taskIndex].width / 53, \"day\")\r\n    },\r\n    resizeTask: (state, action) => {\r\n      const isTask = (task) =>  ((task.index).isSame(action.payload.index, \"day\") && task.row == action.payload.row);\r\n      const taskIndex = state.tasks.findIndex(isTask);\r\n      let task = state.tasks[taskIndex];\r\n      if (task == undefined) {\r\n        console.log(\"Task not found!\", taskIndex);\r\n      }\r\n      state.tasks[taskIndex].width = action.payload.width;\r\n      console.log(action.payload.width)\r\n      if (action.payload.direction == \"left\") {\r\n        state.tasks[taskIndex].index = dayjs(task.index).subtract(action.payload.resizeChange, \"day\");\r\n      }\r\n      state.selectedTask.width = state.tasks[taskIndex].width;\r\n      state.selectedTask.index = state.tasks[taskIndex].index;\r\n      state.selectedTask.startDate = state.tasks[taskIndex].index;\r\n      state.selectedTask.endDate = state.tasks[taskIndex].index.add(state.tasks[taskIndex].width / 53, \"day\")\r\n      \r\n    },\r\n    selectTask: (state, action) => {\r\n      if ((state.selectedTask.index).isSame(action.payload.index, \"day\") && state.selectedTask.row == action.payload.row) {\r\n        state.selectedTask = {selected: false, name: \"\", desc: \"\", index: dayjs(), startDate: dayjs(), endDate: dayjs(), theme: \"No Theme Selected\", row: \"\"}\r\n\r\n      }\r\n      else {\r\n        console.log(action.payload.width);\r\n        state.selectedTask = {selected: true, name: action.payload.name, desc: action.payload.desc, index: action.payload.index, theme: action.payload.theme, startDate: dayjs(action.payload.index), endDate: dayjs(action.payload.index).add(action.payload.width/53, \"day\"), row: action.payload.row};\r\n      }\r\n    },\r\n    renameTask: (state, action) => {\r\n      state.selectedTask.name = action.payload.name;\r\n      const isTask = (task) =>  ((task.index).isSame(state.selectedTask.index, \"day\") && task.row == state.selectedTask.row);\r\n      const taskIndex = state.tasks.findIndex(isTask);\r\n      state.tasks[taskIndex].name = action.payload.name;\r\n    },\r\n    descTask: (state, action) => {\r\n      state.selectedTask.desc = action.payload.desc;\r\n      const isTask = (task) =>  ((task.index).isSame(state.selectedTask.index, \"day\") && task.row == state.selectedTask.row);\r\n      const taskIndex = state.tasks.findIndex(isTask);\r\n      state.tasks[taskIndex].desc = action.payload.desc;\r\n    },\r\n    createTheme: (state, action) => {\r\n      state.themes.push({title: action.payload.title, color: action.payload.color})\r\n    },\r\n    themeTask: (state, action) => {\r\n      state.selectedTask.theme = action.payload.theme;\r\n      const isTask = (task) =>  ((task.index).isSame(state.selectedTask.index, \"day\") && task.row == state.selectedTask.row);\r\n      const taskIndex = state.tasks.findIndex(isTask);\r\n      state.tasks[taskIndex].theme = action.payload.theme;\r\n    },\r\n    startDateTask: (state, action) => {\r\n      const isTask = (task) =>  ((task.index).isSame(state.selectedTask.index, \"day\") && task.row == state.selectedTask.row);\r\n      const taskIndex = state.tasks.findIndex(isTask);\r\n      state.selectedTask.index = action.payload.startDate;\r\n      state.selectedTask.startDate = action.payload.startDate;\r\n      state.tasks[taskIndex].index = action.payload.startDate;\r\n      const duration = state.selectedTask.index.diff(state.selectedTask.endDate, \"day\");\r\n      state.selectedTask.width = Math.abs((duration * 53) + 1);\r\n      state.tasks[taskIndex].width = state.selectedTask.width;\r\n\r\n    },\r\n    endDateTask: (state, action) => {\r\n      const isTask = (task) =>  ((task.index).isSame(state.selectedTask.index, \"day\") && task.row == state.selectedTask.row);\r\n      const taskIndex = state.tasks.findIndex(isTask);\r\n      const duration = state.selectedTask.index.diff(action.payload.endDate, \"day\");\r\n      state.selectedTask.width = Math.abs((duration * 53) + 1);\r\n      state.selectedTask.endDate = action.payload.endDate;\r\n      state.tasks[taskIndex].width = state.selectedTask.width;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, futureMonth, pastMonth, createTask, dragTask, resizeTask, selectTask, renameTask, descTask, createTheme, themeTask, startDateTask, endDateTask } = slice.actions;\r\n\r\nexport const rowCountTable = state => state.table.rowCount;\r\nexport const currentDayTable = state => state.table.currentDay;\r\nexport const daysTable = state => state.table.days;\r\nexport const tasksTable = state => state.table.tasks;\r\nexport const selectedTaskTable = state => state.table.selectedTask;\r\nexport const themesTable = state => state.table.themes;\r\n\r\nexport default slice.reducer;\r\n","C:\\Users\\adamm\\OneDrive\\Documents\\CompSci\\Projects\\Gantt\\Gantt\\src\\features\\table\\Task.js",["92","93","94","95","96","97","98","99"],"import { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    selectTask,\r\n    selectedTaskTable,\r\n    dragTask,\r\n    resizeTask,\r\n    tasksTable,\r\n    themesTable\r\n} from './TableSlice';\r\nimport styles from './Table.module.css';\r\nimport { Rnd } from \"react-rnd\";\r\nimport React from 'react';\r\n\r\nexport function Task({index, row}) {\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector(tasksTable);\r\n    const selectedTask = useSelector(selectedTaskTable);\r\n    const themes = useSelector(themesTable);\r\n\r\n    const getTask = () => {\r\n        const isTask = (task) =>  ((task.index).isSame(index, \"days\") && task.row == row);\r\n        const taskIndex = tasks.findIndex(isTask);\r\n        let task = tasks[taskIndex];\r\n        if (task == undefined) {\r\n          console.log(\"Task not found!\", taskIndex);\r\n        }\r\n        return tasks[taskIndex];\r\n    }\r\n\r\n    const getBorder = () => {\r\n        if (selectedTask.index == \"\") {\r\n            return \"\";\r\n        }\r\n        else if ((selectedTask.index).isSame(index, \"days\") && selectedTask.row == row) {\r\n            return \"3px solid #23C9FF\";\r\n        }\r\n        else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    const getColor = (theme) => {\r\n        const isTheme = (object) =>  (theme == object.title);\r\n        const themeIndex = themes.findIndex(isTheme);\r\n        return themes[themeIndex].color;\r\n    }\r\n\r\n    const displayTaskName = () => {\r\n        const taskName = getTask().name;\r\n        const taskWidth = getTask().width;\r\n        const taskNameSubstring = (taskWidth / 53) * 4;\r\n        if (taskName.length > taskNameSubstring) {\r\n            return taskName.substring(0, taskNameSubstring).concat(\"...\");\r\n        }\r\n        else {\r\n            return taskName;\r\n        }\r\n        return getTask().name.substring(0, ((getTask().width / 53) * 4) + 4).concat(\"...\");\r\n    }\r\n\r\n    return (\r\n        <Rnd className={styles.task}\r\n        style={{border: getBorder(), backgroundColor: getColor(getTask().theme)}}\r\n        onClick={() => dispatch(selectTask({name: getTask().name, desc: getTask().desc, index: index, theme: getTask().theme, width: getTask().width, row: row}))}\r\n        onDragStop={(e, d) => {\r\n            const currentX = Math.round(d.x / 53);\r\n            const currentY = Math.round(d.y / 33);\r\n            if (currentX != 0 || currentY != 0) {\r\n                dispatch(dragTask({index: index, row: row, x: currentX, y: currentY}));\r\n            } \r\n        }}\r\n        onResizeStop={(e, direction, ref, delta, position) => {\r\n            const resizeChange = Math.round(delta.width / 53);\r\n            dispatch(resizeTask({index: index, row: row, width: ref.offsetWidth, resizeChange: resizeChange, direction: direction}));\r\n            }}\r\n          bounds=\".ganttBody\"\r\n          dragGrid={[53, 33]}\r\n          resizeGrid={[53, 33]}\r\n          size={{ width: getTask().width , height: 30 }}\r\n          enableResizing={{\r\n            top: false,\r\n            right: true,\r\n            bottom: false,\r\n            left: true,\r\n            topRight: false,\r\n            bottomRight: false,\r\n            bottomLeft: false,\r\n            topLeft: false,\r\n          }}\r\n        >\r\n          {displayTaskName()}  \r\n        </Rnd>\r\n    )\r\n}",{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"104","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":21},{"ruleId":"100","severity":1,"message":"105","line":4,"column":5,"nodeType":"102","messageId":"103","endLine":4,"endColumn":18},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"106","severity":1,"message":"107","line":61,"column":29,"nodeType":"108","messageId":"109","endLine":61,"endColumn":31},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"110","line":10,"column":11,"nodeType":"102","messageId":"103","endLine":10,"endColumn":19},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"104","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":21},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"106","severity":1,"message":"107","line":26,"column":29,"nodeType":"108","messageId":"109","endLine":26,"endColumn":31},{"ruleId":"106","severity":1,"message":"107","line":26,"column":54,"nodeType":"108","messageId":"109","endLine":26,"endColumn":56},{"ruleId":"106","severity":1,"message":"107","line":43,"column":30,"nodeType":"108","messageId":"109","endLine":43,"endColumn":32},{"ruleId":"106","severity":1,"message":"107","line":72,"column":17,"nodeType":"108","messageId":"109","endLine":72,"endColumn":19},{"ruleId":"106","severity":1,"message":"107","line":80,"column":57,"nodeType":"108","messageId":"109","endLine":80,"endColumn":59},{"ruleId":"106","severity":1,"message":"107","line":82,"column":26,"nodeType":"108","messageId":"109","endLine":82,"endColumn":28},{"ruleId":"106","severity":1,"message":"107","line":82,"column":55,"nodeType":"108","messageId":"109","endLine":82,"endColumn":57},{"ruleId":"106","severity":1,"message":"107","line":96,"column":57,"nodeType":"108","messageId":"109","endLine":96,"endColumn":59},{"ruleId":"106","severity":1,"message":"107","line":98,"column":26,"nodeType":"108","messageId":"109","endLine":98,"endColumn":28},{"ruleId":"106","severity":1,"message":"107","line":98,"column":55,"nodeType":"108","messageId":"109","endLine":98,"endColumn":57},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"111","line":24,"column":22,"nodeType":"102","messageId":"103","endLine":24,"endColumn":40},{"ruleId":"106","severity":1,"message":"107","line":63,"column":97,"nodeType":"108","messageId":"109","endLine":63,"endColumn":99},{"ruleId":"106","severity":1,"message":"107","line":72,"column":95,"nodeType":"108","messageId":"109","endLine":72,"endColumn":97},{"ruleId":"106","severity":1,"message":"107","line":75,"column":16,"nodeType":"108","messageId":"109","endLine":75,"endColumn":18},{"ruleId":"106","severity":1,"message":"107","line":97,"column":95,"nodeType":"108","messageId":"109","endLine":97,"endColumn":97},{"ruleId":"106","severity":1,"message":"107","line":100,"column":16,"nodeType":"108","messageId":"109","endLine":100,"endColumn":18},{"ruleId":"106","severity":1,"message":"107","line":105,"column":36,"nodeType":"108","messageId":"109","endLine":105,"endColumn":38},{"ruleId":"106","severity":1,"message":"107","line":115,"column":100,"nodeType":"108","messageId":"109","endLine":115,"endColumn":102},{"ruleId":"106","severity":1,"message":"107","line":126,"column":99,"nodeType":"108","messageId":"109","endLine":126,"endColumn":101},{"ruleId":"106","severity":1,"message":"107","line":132,"column":99,"nodeType":"108","messageId":"109","endLine":132,"endColumn":101},{"ruleId":"106","severity":1,"message":"107","line":141,"column":99,"nodeType":"108","messageId":"109","endLine":141,"endColumn":101},{"ruleId":"106","severity":1,"message":"107","line":146,"column":99,"nodeType":"108","messageId":"109","endLine":146,"endColumn":101},{"ruleId":"106","severity":1,"message":"107","line":157,"column":99,"nodeType":"108","messageId":"109","endLine":157,"endColumn":101},{"ruleId":"106","severity":1,"message":"107","line":21,"column":83,"nodeType":"108","messageId":"109","endLine":21,"endColumn":85},{"ruleId":"106","severity":1,"message":"107","line":24,"column":18,"nodeType":"108","messageId":"109","endLine":24,"endColumn":20},{"ruleId":"106","severity":1,"message":"107","line":31,"column":32,"nodeType":"108","messageId":"109","endLine":31,"endColumn":34},{"ruleId":"106","severity":1,"message":"107","line":34,"column":81,"nodeType":"108","messageId":"109","endLine":34,"endColumn":83},{"ruleId":"106","severity":1,"message":"107","line":43,"column":45,"nodeType":"108","messageId":"109","endLine":43,"endColumn":47},{"ruleId":"112","severity":1,"message":"113","line":58,"column":9,"nodeType":"114","messageId":"115","endLine":58,"endColumn":92},{"ruleId":"106","severity":1,"message":"116","line":68,"column":26,"nodeType":"108","messageId":"109","endLine":68,"endColumn":28},{"ruleId":"106","severity":1,"message":"116","line":68,"column":43,"nodeType":"108","messageId":"109","endLine":68,"endColumn":45},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'rowCountTable' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'dispatch' is assigned a value but never used.","'KeyboardDatePicker' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","Expected '!==' and instead saw '!='."]